// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResourceService_AllocateResource_FullMethodName        = "/ResourceService/AllocateResource"
	ResourceService_DeleteAllocatedResource_FullMethodName = "/ResourceService/DeleteAllocatedResource"
	ResourceService_GetAllocatedResources_FullMethodName   = "/ResourceService/GetAllocatedResources"
)

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceServiceClient interface {
	AllocateResource(ctx context.Context, in *ResourceReq, opts ...grpc.CallOption) (*ResourceRes, error)
	DeleteAllocatedResource(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*ResourceRes, error)
	GetAllocatedResources(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ContainerInfoRes, error)
}

type resourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceClient(cc grpc.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) AllocateResource(ctx context.Context, in *ResourceReq, opts ...grpc.CallOption) (*ResourceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceRes)
	err := c.cc.Invoke(ctx, ResourceService_AllocateResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteAllocatedResource(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*ResourceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceRes)
	err := c.cc.Invoke(ctx, ResourceService_DeleteAllocatedResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetAllocatedResources(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ContainerInfoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContainerInfoRes)
	err := c.cc.Invoke(ctx, ResourceService_GetAllocatedResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServiceServer is the server API for ResourceService service.
// All implementations must embed UnimplementedResourceServiceServer
// for forward compatibility.
type ResourceServiceServer interface {
	AllocateResource(context.Context, *ResourceReq) (*ResourceRes, error)
	DeleteAllocatedResource(context.Context, *ContainerId) (*ResourceRes, error)
	GetAllocatedResources(context.Context, *Empty) (*ContainerInfoRes, error)
	mustEmbedUnimplementedResourceServiceServer()
}

// UnimplementedResourceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourceServiceServer struct{}

func (UnimplementedResourceServiceServer) AllocateResource(context.Context, *ResourceReq) (*ResourceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateResource not implemented")
}
func (UnimplementedResourceServiceServer) DeleteAllocatedResource(context.Context, *ContainerId) (*ResourceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllocatedResource not implemented")
}
func (UnimplementedResourceServiceServer) GetAllocatedResources(context.Context, *Empty) (*ContainerInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocatedResources not implemented")
}
func (UnimplementedResourceServiceServer) mustEmbedUnimplementedResourceServiceServer() {}
func (UnimplementedResourceServiceServer) testEmbeddedByValue()                         {}

// UnsafeResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServiceServer will
// result in compilation errors.
type UnsafeResourceServiceServer interface {
	mustEmbedUnimplementedResourceServiceServer()
}

func RegisterResourceServiceServer(s grpc.ServiceRegistrar, srv ResourceServiceServer) {
	// If the following call pancis, it indicates UnimplementedResourceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResourceService_ServiceDesc, srv)
}

func _ResourceService_AllocateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AllocateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_AllocateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AllocateResource(ctx, req.(*ResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteAllocatedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteAllocatedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteAllocatedResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteAllocatedResource(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetAllocatedResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetAllocatedResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetAllocatedResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetAllocatedResources(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceService_ServiceDesc is the grpc.ServiceDesc for ResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateResource",
			Handler:    _ResourceService_AllocateResource_Handler,
		},
		{
			MethodName: "DeleteAllocatedResource",
			Handler:    _ResourceService_DeleteAllocatedResource_Handler,
		},
		{
			MethodName: "GetAllocatedResources",
			Handler:    _ResourceService_GetAllocatedResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
